/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
* 
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/

"use strict";



export interface AttributeDescriptor {
    attributeName: string;
    containerName: string;
}

export interface AttributesContainer {
    attributes: { [key: string] : ProfileAttribute; };
    containerName: string;
    revision: number;
}

export interface Avatar {
    isAutoGenerated: boolean;
    size: AvatarSize;
    timeStamp: Date;
    value: number[];
}

export enum AvatarSize {
    Small = 0,
    Medium = 1,
    Large = 2,
}

export interface CoreProfileAttribute extends ProfileAttributeBase<any> {
}

export interface Country {
    code: string;
    englishName: string;
}

export interface CreateProfileContext {
    cIData: { [key: string] : any; };
    contactWithOffers: boolean;
    countryName: string;
    displayName: string;
    emailAddress: string;
    hasAccount: boolean;
    language: string;
    phoneNumber: string;
}

export interface GeoRegion {
    regionCode: string;
}

export interface Profile {
    applicationContainer: AttributesContainer;
    coreAttributes: { [key: string] : CoreProfileAttribute; };
    coreRevision: number;
    id: string;
    revision: number;
    timeStamp: Date;
}

export interface ProfileAttribute extends ProfileAttributeBase<string> {
}

export interface ProfileAttributeBase<T> {
    descriptor: AttributeDescriptor;
    revision: number;
    timeStamp: Date;
    value: T;
}

/**
 * Country/region information
 */
export interface ProfileRegion {
    /**
     * The two-letter code defined in ISO 3166 for the country/region.
     */
    code: string;
    /**
     * Localized country/region name
     */
    name: string;
}

/**
 * Container of country/region information
 */
export interface ProfileRegions {
    /**
     * List of country/region code with contact consent requirement type of notice
     */
    noticeContactConsentRequirementRegions: string[];
    /**
     * List of country/region code with contact consent requirement type of opt-out
     */
    optOutContactConsentRequirementRegions: string[];
    /**
     * List of country/regions
     */
    regions: ProfileRegion[];
}

export var TypeInfo = {
    AttributeDescriptor: {
        fields: <any>null
    },
    AttributesContainer: {
        fields: <any>null
    },
    Avatar: {
        fields: <any>null
    },
    AvatarSize: {
        enumValues: {
            "small": 0,
            "medium": 1,
            "large": 2,
        }
    },
    CoreProfileAttribute: {
        fields: <any>null
    },
    Country: {
        fields: <any>null
    },
    CreateProfileContext: {
        fields: <any>null
    },
    GeoRegion: {
        fields: <any>null
    },
    Profile: {
        fields: <any>null
    },
    ProfileAttribute: {
        fields: <any>null
    },
    ProfileAttributeBase: {
        fields: <any>null
    },
    ProfileRegion: {
        fields: <any>null
    },
    ProfileRegions: {
        fields: <any>null
    },
};

TypeInfo.AttributeDescriptor.fields = {
};

TypeInfo.AttributesContainer.fields = {
    attributes: {
    },
};

TypeInfo.Avatar.fields = {
    size: {
        enumType: TypeInfo.AvatarSize
    },
    timeStamp: {
        isDate: true,
    },
};

TypeInfo.CoreProfileAttribute.fields = {
    descriptor: {
        typeInfo: TypeInfo.AttributeDescriptor
    },
    timeStamp: {
        isDate: true,
    },
};

TypeInfo.Country.fields = {
};

TypeInfo.CreateProfileContext.fields = {
};

TypeInfo.GeoRegion.fields = {
};

TypeInfo.Profile.fields = {
    applicationContainer: {
        typeInfo: TypeInfo.AttributesContainer
    },
    coreAttributes: {
    },
    timeStamp: {
        isDate: true,
    },
};

TypeInfo.ProfileAttribute.fields = {
    descriptor: {
        typeInfo: TypeInfo.AttributeDescriptor
    },
    timeStamp: {
        isDate: true,
    },
};

TypeInfo.ProfileAttributeBase.fields = {
    descriptor: {
        typeInfo: TypeInfo.AttributeDescriptor
    },
    timeStamp: {
        isDate: true,
    },
};

TypeInfo.ProfileRegion.fields = {
};

TypeInfo.ProfileRegions.fields = {
    regions: {
        isArray: true,
        typeInfo: TypeInfo.ProfileRegion
    },
};
